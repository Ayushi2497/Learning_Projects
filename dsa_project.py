# -*- coding: utf-8 -*-
"""DSA_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HX3QMGkC-yw9pRnVVvuyrDyXBwJglzLy
"""

class Test:
  def __init__(self):
    self.x=10

  def show(self):
    print(self.x)

ob= Test()
ob.show()

# How id will be generated automatically
import string
import random

# Random function to generate otp/ id
def generate_id():
  tokens=list(string.ascii_letters+string.digits)
  uid =''
  #print(tokens)
  for i in range(6):
    uid += random.choice(tokens)
  return uid

class Amazon:
  def __init__(self):
    self.id=None
    self.name=None
    self.email=None
    self.order_cart=None
    self.isprime=1
    
  def get_details(self):
    self.id=generate_id()
    self.name=input("Enter Name= ")
    self.email=input("Enter Email= ")

  def buy_prime(self):
    self.isprime=0
  
  def buy_items(self):
    self.order_cart=[i for i in input("Enter the item names= ").split(", ")]   #Taking multiple input called list comprehension

user_list=[]

def find_user_pos(new_user):
  user_count=len(user_list)
  pos=0
  for i in range(user_count):
    if user_list[i].isprime<=new_user.isprime:
      pos+=1
  return pos

ch='y'
while ch=='y':
  new_user=Amazon()
  new_user.get_details()

  op= input("Want to order Anything y/n = ")
  if op =='y':
    new_user.buy_items()
  op=input("Do you want to buy prime y/n= ")
  if op =='y':
    new_user.buy_prime()

  pos=find_user_pos(new_user)
  user_list.insert(pos, new_user)
  #user_list.append(new_user)
  ch=input("Do you want to add more users y/n= ")

print(user_list)

#user_list=sorted(user_list, key= lambda user: user.isprime)

for i in user_list:
  print(i.name, i.isprime, i.order_cart)

for i in user_list:
  if i.isprime==0:
    print(f"Hii {i.name}, Your order has been shipped under prime delivery")
  else:
    print(f"Hii {i.name}, Your order has been shipped ")

#f=lambda x: x*2
#print(f(90))

"""# ***Priority Queue--***
an element associated with priority. Based on priority it would be handled or arranged.

"""